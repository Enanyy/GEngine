// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_2eproto();
void protobuf_AssignDesc_server_2eproto();
void protobuf_ShutdownFile_server_2eproto();

class serverappinfo;
class ss_register_request;
class ss_register_return;

// ===================================================================

class serverappinfo : public ::google::protobuf::Message {
 public:
  serverappinfo();
  virtual ~serverappinfo();

  serverappinfo(const serverappinfo& from);

  inline serverappinfo& operator=(const serverappinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const serverappinfo& default_instance();

  void Swap(serverappinfo* other);

  // implements Message ----------------------------------------------

  serverappinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const serverappinfo& from);
  void MergeFrom(const serverappinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.serverappinfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* name_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static serverappinfo* default_instance_;
};
// -------------------------------------------------------------------

class ss_register_request : public ::google::protobuf::Message {
 public:
  ss_register_request();
  virtual ~ss_register_request();

  ss_register_request(const ss_register_request& from);

  inline ss_register_request& operator=(const ss_register_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ss_register_request& default_instance();

  void Swap(ss_register_request* other);

  // implements Message ----------------------------------------------

  ss_register_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ss_register_request& from);
  void MergeFrom(const ss_register_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.serverappinfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::pb::serverappinfo& info() const;
  inline ::pb::serverappinfo* mutable_info();
  inline ::pb::serverappinfo* release_info();
  inline void set_allocated_info(::pb::serverappinfo* info);

  // @@protoc_insertion_point(class_scope:pb.ss_register_request)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::serverappinfo* info_;
  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ss_register_request* default_instance_;
};
// -------------------------------------------------------------------

class ss_register_return : public ::google::protobuf::Message {
 public:
  ss_register_return();
  virtual ~ss_register_return();

  ss_register_return(const ss_register_return& from);

  inline ss_register_return& operator=(const ss_register_return& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ss_register_return& default_instance();

  void Swap(ss_register_return* other);

  // implements Message ----------------------------------------------

  ss_register_return* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ss_register_return& from);
  void MergeFrom(const ss_register_return& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional .pb.serverappinfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::pb::serverappinfo& info() const;
  inline ::pb::serverappinfo* mutable_info();
  inline ::pb::serverappinfo* release_info();
  inline void set_allocated_info(::pb::serverappinfo* info);

  // @@protoc_insertion_point(class_scope:pb.ss_register_return)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::serverappinfo* info_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_server_2eproto();
  friend void protobuf_AssignDesc_server_2eproto();
  friend void protobuf_ShutdownFile_server_2eproto();

  void InitAsDefaultInstance();
  static ss_register_return* default_instance_;
};
// ===================================================================


// ===================================================================

// serverappinfo

// optional uint32 id = 1;
inline bool serverappinfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void serverappinfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void serverappinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void serverappinfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 serverappinfo::id() const {
  // @@protoc_insertion_point(field_get:pb.serverappinfo.id)
  return id_;
}
inline void serverappinfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.serverappinfo.id)
}

// optional uint32 type = 2;
inline bool serverappinfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void serverappinfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void serverappinfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void serverappinfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 serverappinfo::type() const {
  // @@protoc_insertion_point(field_get:pb.serverappinfo.type)
  return type_;
}
inline void serverappinfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.serverappinfo.type)
}

// optional string name = 3;
inline bool serverappinfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void serverappinfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void serverappinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void serverappinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& serverappinfo::name() const {
  // @@protoc_insertion_point(field_get:pb.serverappinfo.name)
  return *name_;
}
inline void serverappinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.serverappinfo.name)
}
inline void serverappinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.serverappinfo.name)
}
inline void serverappinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.serverappinfo.name)
}
inline ::std::string* serverappinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.serverappinfo.name)
  return name_;
}
inline ::std::string* serverappinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void serverappinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.serverappinfo.name)
}

// optional string ip = 4;
inline bool serverappinfo::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void serverappinfo::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void serverappinfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void serverappinfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& serverappinfo::ip() const {
  // @@protoc_insertion_point(field_get:pb.serverappinfo.ip)
  return *ip_;
}
inline void serverappinfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:pb.serverappinfo.ip)
}
inline void serverappinfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.serverappinfo.ip)
}
inline void serverappinfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.serverappinfo.ip)
}
inline ::std::string* serverappinfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.serverappinfo.ip)
  return ip_;
}
inline ::std::string* serverappinfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void serverappinfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.serverappinfo.ip)
}

// optional uint32 port = 5;
inline bool serverappinfo::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void serverappinfo::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void serverappinfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void serverappinfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 serverappinfo::port() const {
  // @@protoc_insertion_point(field_get:pb.serverappinfo.port)
  return port_;
}
inline void serverappinfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:pb.serverappinfo.port)
}

// -------------------------------------------------------------------

// ss_register_request

// optional .pb.serverappinfo info = 1;
inline bool ss_register_request::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ss_register_request::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ss_register_request::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ss_register_request::clear_info() {
  if (info_ != NULL) info_->::pb::serverappinfo::Clear();
  clear_has_info();
}
inline const ::pb::serverappinfo& ss_register_request::info() const {
  // @@protoc_insertion_point(field_get:pb.ss_register_request.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::serverappinfo* ss_register_request::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::serverappinfo;
  // @@protoc_insertion_point(field_mutable:pb.ss_register_request.info)
  return info_;
}
inline ::pb::serverappinfo* ss_register_request::release_info() {
  clear_has_info();
  ::pb::serverappinfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ss_register_request::set_allocated_info(::pb::serverappinfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ss_register_request.info)
}

// -------------------------------------------------------------------

// ss_register_return

// optional uint32 result = 1;
inline bool ss_register_return::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ss_register_return::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ss_register_return::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ss_register_return::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 ss_register_return::result() const {
  // @@protoc_insertion_point(field_get:pb.ss_register_return.result)
  return result_;
}
inline void ss_register_return::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.ss_register_return.result)
}

// optional .pb.serverappinfo info = 2;
inline bool ss_register_return::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ss_register_return::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ss_register_return::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ss_register_return::clear_info() {
  if (info_ != NULL) info_->::pb::serverappinfo::Clear();
  clear_has_info();
}
inline const ::pb::serverappinfo& ss_register_return::info() const {
  // @@protoc_insertion_point(field_get:pb.ss_register_return.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::serverappinfo* ss_register_return::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::serverappinfo;
  // @@protoc_insertion_point(field_mutable:pb.ss_register_return.info)
  return info_;
}
inline ::pb::serverappinfo* ss_register_return::release_info() {
  clear_has_info();
  ::pb::serverappinfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ss_register_return::set_allocated_info(::pb::serverappinfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ss_register_return.info)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
